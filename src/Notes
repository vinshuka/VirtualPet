Virtual Pet Project

A full graphics refactoring, we want to create a new loop that has respond to input, update, and render.

Respond to input will be just like our original menu respond to input but it will be a separate method, I think
creating a new method in a game loop class will be best, will initialize our game with our pet and player class, along
with a game loop or game engine class.

Current keyPressed event in application main can be refactored to change just the menu variable, and then a new method,
called process input can set up the various values,

Respond to user input will use a key listener and have a switch for all buttons, because of the changing menus(game states)
will need to check the state and give the appropriate options. Maybe something like this:

    public void userInput(KeyEvent key, Menu menu)
    {
        switch(gameScreen) //current gameScreen, in this case the feedMenu
        {
            case feedMenu:
                switch(key.getKeyCode())
                {
                    case KeyEvent.VK_1:
                        setMenu(); //changes menu variable to Eat
                        setFood(PetOwner.Food.Meat);
                }
        }
    }

So the gameLoop will look like:
    while(true)
    {
        userInput(key, getMenu()); //this may need to be separate from everything due to JFrame
        update();
        render(getMenu());
    }

Update will change data, for example changing the menu, updating the pet's values, something like this:

    public void update()
    {
        switch(getMenu)
        {
            case Eat:
                switch(getFood())
                {
                    case PetOwner.Food.MEAT:
                        owner.feed(PetOwner.Food.MEAT);
                        break;
                }
        }
    }

Render will look something like this:

    public void render(gameScreen)
    {
        switch(gameScreen)
        {
            case Eat:
                draw("EatMenu " + getFood());
                setFood(null);
        }
    }

So the game engine class will look something like this:

public class GameEngine()
{
    private AsciiPanel gameScreen;
    private HashMap<String, Character[][]> graphics;
    private Menu menu;
    private Pet pet;
    private PetOwner owner;

    public GameEngine()
    {
        //general constructor
    }

    public void userInput(KeyEvent e, Menu menu)
    {
        //a series of nested switch statements
    }

    public void update()
    {
        //based on the menu, we will update certain pet values
    }

    public void Render(Menu menu)
    {
        //grabs the graphic from the Hashmap and draws it to the screen
        //graphics will be full Character maps of the whole screen and be displayed with a for loop
        //may include a frameA and frameB version of each graphic, and animate every frame by alternating A and B
        //versions
    }
}
